generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  auth0Id  String? @unique @map("auth0_id") // Auth0 user ID
  name     String
  email    String  @unique

  projects   Project[]
  tokens     Token[]
  rateLimits RateLimit[]
}

model Token {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  name        String
  token       String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  lastUsed    DateTime? @map("last_used")
  expiresAt   DateTime? @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  projectName  String   @map("project_name")
  repoUrl      String   @map("repo_url")
  description  String?
  createdAt    DateTime @default(now()) @map("created_at")
  latestSbomId String?  @map("latest_sbom_id") @db.ObjectId
  tags         String[]

  user  User   @relation(fields: [userId], references: [id])
  sboms Sbom[]
}

model Sbom {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId            String   @db.ObjectId
  storageUrl           String   @map("storage_url")
  format               String
  tool                 String
  commitHash           String   @map("commit_hash")
  generatedAt          DateTime @default(now()) @map("generated_at")
  componentsCount      Int      @map("components_count")
  vulnerabilitiesFound Int      @map("vulnerabilities_found")

  project Project @relation(fields: [projectId], references: [id])
}

// NEW: Rate Limiting Model
model RateLimit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  endpoint     String   // e.g., "tokens", "protected", "global"
  requestCount Int      @default(0) @map("request_count")
  windowStart  DateTime @default(now()) @map("window_start")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId, endpoint, windowStart])
}
